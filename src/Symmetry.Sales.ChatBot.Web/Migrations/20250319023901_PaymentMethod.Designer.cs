// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Symmetry.Sales.ChatBot.Infrastructure.Data;

#nullable disable

namespace Symmetry.Sales.ChatBot.Web.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250319023901_PaymentMethod")]
    partial class PaymentMethod
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Symmetry.Sales.ChatBot.Core.BusinessAggregate.Business", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.ToTable("Business");
                });

            modelBuilder.Entity("Symmetry.Sales.ChatBot.Core.BusinessAggregate.Contact", b =>
                {
                    b.Property<string>("ContactId")
                        .HasColumnType("text");

                    b.Property<int?>("BusinessId")
                        .HasColumnType("integer");

                    b.Property<int>("ContactOrigin")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ContactId");

                    b.HasIndex("BusinessId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("Symmetry.Sales.ChatBot.Core.BusinessAggregate.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BusinessId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PaymentMethodType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("Symmetry.Sales.ChatBot.Core.ChatAggregate.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("Origin")
                        .HasColumnType("integer");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Symmetry.Sales.ChatBot.Core.ChatAggregate.Conversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChatId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.ToTable("Conversation");
                });

            modelBuilder.Entity("Symmetry.Sales.ChatBot.Core.ChatAggregate.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ConversationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp");

                    b.Property<int>("Sender")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("Symmetry.Sales.ChatBot.Core.BusinessAggregate.Contact", b =>
                {
                    b.HasOne("Symmetry.Sales.ChatBot.Core.BusinessAggregate.Business", null)
                        .WithMany("Contacts")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Symmetry.Sales.ChatBot.Core.BusinessAggregate.PaymentMethod", b =>
                {
                    b.HasOne("Symmetry.Sales.ChatBot.Core.BusinessAggregate.Business", null)
                        .WithMany("PaymentMethods")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Symmetry.Sales.ChatBot.Core.ChatAggregate.Conversation", b =>
                {
                    b.HasOne("Symmetry.Sales.ChatBot.Core.ChatAggregate.Chat", null)
                        .WithMany("Conversations")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Symmetry.Sales.ChatBot.Core.ChatAggregate.Message", b =>
                {
                    b.HasOne("Symmetry.Sales.ChatBot.Core.ChatAggregate.Conversation", null)
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Symmetry.Sales.ChatBot.Core.BusinessAggregate.Business", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("PaymentMethods");
                });

            modelBuilder.Entity("Symmetry.Sales.ChatBot.Core.ChatAggregate.Chat", b =>
                {
                    b.Navigation("Conversations");
                });

            modelBuilder.Entity("Symmetry.Sales.ChatBot.Core.ChatAggregate.Conversation", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
